import sys
import re
import os
import pickle
import pickletools
import inverted_index_builder
from collections import defaultdict

filenames = []
inverted_index = defaultdict(set)
kgram_index = defaultdict(set)
k = 2

class KGramGenerator:
  """ 
  Class that handles k-gram generation for the two cases: 
  1. generation of k-grams for each index term
  2. generation of k-grams appropriately for a wild-card query

  Separation of the logic is needed because for wild-card queries, we need to 
  know what the position of the wild-card(*) is to properly append the delim
  character($)

  The class takes in the delimiter and k-value as parameters. Kgrams for an index
  term or a query term can be generated by invoking the get_kgrams() method """
  def __init__(self, delim, k):
    self.delim = delim
    self.k = k
  def kgram_for_query(self, query, star_index):
    """ generation of k-grams for query terms such as quixo*, ab*c, *c etc """
    delim = self.delim
    k = self.k
    n = len(query)
    kgrams = self.generate_kgrams(query[:star_index])
    kgrams.update(self.generate_kgrams(query[star_index+1:]))
    if(star_index == 0):
      kgrams.add(query[n-k+1:]+delim)
    elif(star_index == len(query)-1):
      kgrams.add(delim+query[0:k-1])
    else:
      kgrams.add(delim+query[0:k-1])
      kgrams.add(query[n-k+1:]+delim)
    return kgrams
  def kgram_for_index(self, word):
    """ generation of k-grams for full index words such as quixote, mark, twain etc """
    delim = self.delim
    k = self.k
    kgrams = self.generate_kgrams(word)
    n = len(word)
    kgrams.add(delim+word[0:k-1])
    kgrams.add(word[n-k+1:]+delim)
    return kgrams
  def generate_kgrams(self, word):
    """ common method that generates kgrams for a string of alphanumeric characters """
    k = self.k
    kgrams = set([])
    n = len(word)
    for i in range(0, n-k+1):
      kgrams.add(word[i:i+k])
    return kgrams
  def get_kgrams(self, word):
    """ method exposed """
    star_index = word.find('*')
    if(star_index == -1):
      return self.kgram_for_index(word)
    else:
      return self.kgram_for_query(word, star_index)


def tokenize(text):
  p = re.compile(r'\W+')
  return p.split(text)

def read_file(filename):
  f = open(filename, 'r')
  st = f.read()
  f.close()
  return st

def get_query_components(query):
  return query.split('*')

def build_kgram_index(inverted_index):
  for key in inverted_index.keys(): #will hopefully only return pointers
    generator = KGramGenerator('$', k)
    kgrams = generator.get_kgrams(key)
    for kg in kgrams:
      kgram_index[kg].add(key)
  return kgram_index

def write_index(index):
  f = open('kgram_index.pick', 'wb')
  pickle.dump(index, f)
  f.close()
  print 'Index pickled to file kgram_index.pick'
  return

